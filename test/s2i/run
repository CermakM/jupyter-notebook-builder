#!/bin/bash
#
# NOTE: This file has been bootstraped from `s2i create` command
#
# The 'run' performs a simple test that verifies the S2I image.
# The main focus here is to exercise the S2I scripts.
#
# For more information see the documentation:
# https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md

# JUPYTER_NOTEBOOK_PATH is a path to the test Jupyter Notebook
JUPYTER_NOTEBOOK_PATH="test-notebook.ipynb"

# IMAGE_NAME specifies a name of the candidate image used for testing.
# The image has to be available before this script is executed.
IMAGE_NAME=${IMAGE_NAME:-jupyter-notebook-s2i}

# Port the image exposes service to be tested
TEST_PORT=8080

# Whether to do cleanup after the test
CLEAUP=${CLEANUP:-true}

# Since we built the candidate image locally, we don't want S2I to attempt to pull
# it from Docker hub
STI_ARGS="--pull-policy=never --loglevel=2"


# Determining system utility executables (darwin compatibility check)
READLINK_EXEC="readlink -zf"
MKTEMP_EXEC="mktemp --suffix=.cid"

_dir="$(dirname "${BASH_SOURCE[0]}")"
cid_file=$($MKTEMP_EXEC -u)

test_dir="$($READLINK_EXEC ${_dir} || echo ${_dir})"
image_dir=$($READLINK_EXEC ${test_dir}/.. || echo ${test_dir}/..)

scripts_url="${image_dir}/.s2i/bin"

image_exists() {
  docker inspect $1 &>/dev/null
}

container_exists() {
  image_exists $(cat $cid_file)
}

container_ip() {
  docker inspect --format="{{(index .NetworkSettings.Ports \"$TEST_PORT/tcp\" 0).HostIp }}" $(cat $cid_file) | sed 's/0.0.0.0/localhost/'
}

container_port() {
  docker inspect --format="{{(index .NetworkSettings.Ports \"$TEST_PORT/tcp\" 0).HostPort }}" "$(cat "${cid_file}")"
}

run_s2i_build() {
  s2i build \
    --env JUPYTER_NOTEBOOK_PATH="$JUPYTER_NOTEBOOK_PATH" \
    --incremental=true \
    ${STI_ARGS} ${test_dir}/test-app ${IMAGE_NAME} ${IMAGE_NAME}-testapp
}

prepare() {
  if ! image_exists ${IMAGE_NAME}; then
    echo "ERROR: The image ${IMAGE_NAME} must exist before this script is executed."
    exit 1
  fi
  # s2i build requires the application is a valid 'Git' repository
  pushd ${test_dir}/test-app >/dev/null
  git init
  git config user.email "build@localhost" && git config user.name "builder"
  git add -A && git commit -m "Sample commit"
  popd >/dev/null
  run_s2i_build
}

run_test_application() {
  docker run \
  --env JUPYTER_NOTEBOOK_PATH="$JUPYTER_NOTEBOOK_PATH" \
  --rm --cidfile=${cid_file} -p ${TEST_PORT}:${TEST_PORT} ${IMAGE_NAME}-testapp
}

cleanup() {
  if [ -f $cid_file ]; then
    if container_exists; then
      docker stop $(cat $cid_file)
    fi
  fi

  if image_exists ${IMAGE_NAME}-testapp; then
    docker rmi ${IMAGE_NAME}-testapp
  fi
}

check_result() {
  local result="$1"

  if [[ "$result" != "0" ]]; then
    echo "S2I image '${IMAGE_NAME}' test FAILED (exit code: ${result})"
    cleanup
    exit $result
  fi
}

wait_for_cid() {
  local max_attempts=10
  local sleep_time=1
  local attempt=1
  local result=1

  while [ $attempt -le $max_attempts ]; do
    [ -f $cid_file ] && break
    echo "Waiting for container to start..."
    attempt=$(( $attempt + 1 ))
    sleep $sleep_time
  done
}

test_usage() {
  echo "Testing 's2i usage'..."
  s2i usage ${STI_ARGS} ${IMAGE_NAME} &>/dev/null
}

test_output() {
  echo "Testing s2i output."

  local output_notebook="${test_dir}/output.ipynb"

  docker cp "$(cat ${cid_file})":'/opt/app-root/src/output.ipynb' "${output_notebook}"

  local result=0
  if [ cat $("${output_notebook}" | jq -c '.metadata.papermill.exception') == "null" ]; then
    echo "An exception occurred during notebook execution."
    result=1
  fi

  [ "$CLEANUP" == "true" ] && rm "${output_notebook}"

  return $result
}

# Build the application image twice to ensure the 'save-artifacts' and
# 'restore-artifacts' scripts are working properly
prepare
run_s2i_build
check_result $?

# Verify the 'usage' script is working properly
test_usage
check_result $?

# Verify that the HTTP connection can be established to test application container
run_test_application &

# Wait for the container to write its CID file
wait_for_cid

test_output
check_result $?

[ "$CLEANUP" == "true" ] && cleanup
